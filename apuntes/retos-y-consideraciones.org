#+TITLE: Retos y consideraciones
#+AUTHOR: José Luis de la Hoz García
#+DATE: <2023-08-14 Mon>

* ¿Cómo realizar un testbench?
- ¿Cómo introducir el set de datos a los algoritmos?
- ¿Cómo obtener datos a partir de la ejecución de los algoritmos, y
  que estos sean fidedignos?  [[https://v8.dev/docs/profile][Profile V8 engine]] o utilizándolo
  directamente en [[https://nodejs.org/en/docs/guides/simple-profiling][nodejs]].  [[https://developer.chrome.com/docs/devtools/][Chrome Dev Tools]], Firefox Dev Tools, Safari
  Dev Tools.  CPU Profiling.
- ¿Qué tipo de datos necesitaré?  Comprobar: latencia, memoria, %CPU,
  tiempo de despliegue, ...
- ¿Bajo qué condiciones realizaré los testbench? (Harwdware,
  navegadores, etc).
- ¿Cuántos datos de muestra necesitaré para llegar a un análisis
  concluyente?

* Motores JavaScript
JavaScript nació como un lenguaje de programación desarrollado por
Brendan Eich para el navegador Netscape, el lenguaje fue concebido con
la idea de incorporar interactividad a la web. Rápidamente el resto de
navegadores quisieron implementar su propio lenguaje, similar a
Javascript, creando así una serie de dialectos JavaScript que no eran
compatibles entre sí. Las incompatibilidades producían que una página
web pudiera o no ejecutarse correctamente en función si era el
dialecto JavaScript adecuado, produciendo un entorno heterogéneo
dentro de los navegadores web. De modo que en 1997 los principales
agentes desarrollaron un estándar internacional llamado
ECMAScript. Por tanto, cuando actualmente hablamos de JavaScript como
lenguaje, realmente nos referimos a la estandarización ECMAScript.

Para interpretar el código javascript los navegadores necesitan un
motor diseñado específicamente para la tarea: los motores
javascript. Los navegadores modernos cuentan con motores javascript
muy sofisticados y complejos con el objetivo de interpretar
eficientemente el código javascript. Debido a la estandarización
ECMAScript y la competencia entre los navegadores se desarrollaron
varios motores javascript, estos interpretan el código de forma
homogénea (sin inconsistencias). Sin embargo, aún siendo homogéneos en
ejecución, estos difieren en el rendimiento ya que son
implementaciones distintas del estándar con sus consecuentes
diferencias en diseño, objetivos, lenguajes de programación
utilizados, etc.

Actualmente desarrollar navegadores es de una gran complejidad (mayor
a la de un sistema operativo FUENTE). Los navegadores están en una
constante evolución con la inclusión de nuevos estándares y
tecnologías (como WebAssembly). Por tanto no es sorprendente observar
que el número de implementaciones se reducen y los esfuerzos se
concentran en unos motores javascript, también gracias al desarrollo
de software libre y open source de los navegadores. Precisamente
Microsoft en 2020 decidió dejar de desarrollar su navegador en favor
de utilizar un navegador basado en Chromium de Google; esto recalca el
coste económico que requiere el desarrollo de un navegador cuando una
corporación como Microsoft toma una decisión de este calibre, siendo
además uno de los líderes históricos del sector con su antiguo
Internet Explorer y el posterior Microsoft Edge.

Existen muchos navegadores hoy en día, la lista sería interminable, y
sin embargo la mayoría de ellos utilizan el mismo motor "debajo del
capó". O directamente utilizan el código fuente de otros navegadores
con ligeras modificaciones, como es el caso de Microsoft Edge. Los
principales motores javascript usados en los navegadores más
importantes son: V8, de Chrome; SpiderMonkey, de Firefox;
JavaScriptCore, de Safari; y [[https://github.com/chakra-core/ChakraCore#future-of-chakracore][Chakra]], del antiguo Edge y en desuso.

** Entornos de ejecución JavaScript
La ejecución de código JS comúnmente se realiza desde un navegador
web, y durante un tiempo era el único modo de ejecutar código JS. Sin
embargo, han surgido nuevos entornos de ejecución JS independientes
del navegador que permiten utilizar JS fuera del ámbito web:
- NodeJS (V8).
- Deno (V8).
- [[https://bun.sh/][Bun]] (JavaScriptCore).

* Fibonnacci recursivo
En el navegador, tanto WASM y JS, deja de retornar resultados
correctos a partir del argumento 47 porque los valores de fibonnacci
crecen tan exponencialmente que sobrepasa la capacidad de 32
bits. Tratando de poner un entero de 64 bits sin signo parece que no
lo admite el navegador y lo trata como entero con signo de 32 bits
(averiguar porque).

* Búsqueda linear
Utilizaré bucles ~for~ en vez de el método ~forEach~ del prototipo
Array. En primer lugar para mantener la máxima homogeneidad entre los
distintos códigos, y en segundo lugar porque el rendimiento del bucle
~for~ es ligeramente superior.

Implementaré la búsqueda linear con el bucle ~for~. Recorrerá el array
hasta que encuentre el valor buscado, una vez encontrado retornará su
índice. En caso de no hacerlo retornará el número entero -1.
