#+TITLE: Apuntes sobre NodeJS
#+DATE: <2023-09-19 Tue>
#+AUTHOR: José Luis de la Hoz García

* Extensiones C++
Las extensiones son objetos escritos en C++ y compartidos de forma
enlazada dinámicamente. Proveen una interfaz entre JavaScript y
librerías de C/C++. Para cargar una extensión se utilizará la función
~require()~ que lo introducirá como si de un módulo NodeJS se tratase.

Para la creación de extensiones C++ en NodeJS existen tres vías:
1. [[https://nodejs.org/api/n-api.html][Node-API]]
2. nan
3. Librería V8

Según la recomendación de la documentación es preferible usar
directamente la API de NodeJS: Node-API. Por tanto trataré de utilizar
dicha API para la implementación de las extensiones C++.

Una de las ventajas de Node-API es que será estable en cualquier
versión de NodeJS y aislará a las extensiones de los cambios
producidos en el motor JavaScript.

* Dependencias
- node-addon-api
- [[https://github.com/nodejs/node-gyp][node-gyp]]
- Compiladores C/C++

* Uso de la API
[[http://nodejs.github.io/node-addon-examples/getting-started/first/][Proyecto básico tutorial de Node-API.]]

GYP es una herramienta que permite tener un único fichero de
configuración que funcione en todas las plataformas y arquitecturas
que GYP soporta. Esto simplifica enormemente los esfuerzos por
producir un ejecutable para cada plataforma soportada. NodeJS cuenta
con su propia implementación de GYP conocida como ~node-gyp~ y es la
herramienta por defecto para construir extensiones nativas. Para la
construcción del proyecto se ejecutará ~node-gyp build~.

Crear un módulo que cuente con todos los algoritmos implementados. Un
módulo WASM, JavaScript, NodeJS/C++ y Deno/Rust.

El módulo [[https://github.com/nodejs/node-addon-api#api-documentation][node-addon-api]] es un paquete npm que simplifica el uso de
Node-API agregando clases "wrapper" C++.

Para el tratamiento en C++ de los objetos/arrays JavaScript
debemos realizar una conversión nativa. De forma que convertimos el
objeto JavaScript, realizamos las operaciones y de ser necesario crearemos
un nuevo objeto/array JavaScript que retornaríamos a NodeJS.

Para la reconversión nativa utilizaremos estructuras de datos
compatibles entre sí. En este caso el array de enteros en C++ es
compatible con el array tipado como Int32Array.
